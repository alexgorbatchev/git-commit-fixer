import os
import subprocess
import openai

openai.api_key = os.getenv("OPENAI_API_KEY")

# Files to exclude from diffs
EXCLUDE_FILES = ["yarn.lock", "package-lock.json", ".lock", ".json", ".min.js"]

def should_exclude_file(filename):
  return any(filename.endswith(pattern) for pattern in EXCLUDE_FILES)

def get_filtered_diff(commit_hash):
  diff_output = subprocess.run(
    ["git", "show", commit_hash, "--pretty=", "--name-only"],
    capture_output=True, text=True
  ).stdout

  files = diff_output.strip().split('\n')
  files_to_include = [f for f in files if not should_exclude_file(f)]

  if not files_to_include:
    return "[Autogenerated or lock files only, no meaningful diff.]"

  diff = subprocess.run(
    ["git", "show", commit_hash, "--pretty=", "--unified=0", "--"] + files_to_include,
    capture_output=True, text=True
  ).stdout

  max_diff_length = 120000  # truncate to a reasonable size
  if len(diff) > max_diff_length:
    diff = diff[:max_diff_length] + "\n\n[Diff truncated due to length]"

  return diff

def get_ai_message(diff):
  prompt = f"""
  Summarize the following git diff into a single, concise commit message (max 15 words):

  {diff}

  Commit message:
  """
  response = openai.ChatCompletion.create(
    model="gpt-4-turbo",
    messages=[{"role": "user", "content": prompt}],
    temperature=0.0,
    max_tokens=50,
  )
  return response.choices[0].message.content.strip().strip('"')

def commit_callback(commit):
  commit_hash = commit.original_id.decode()
  diff = get_filtered_diff(commit_hash)
  
  new_message = get_ai_message(diff)
  print(f"{commit_hash}: {new_message}\n")
  
  commit.message = new_message.encode()
